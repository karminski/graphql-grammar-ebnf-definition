/**
 * GraphQL-Grammar-EBNF-Definition-June-2018-Edition.ebnf
 *
 * author:     karminski <code.karminski@outlook.com>
 * license:    MIT <https://opensource.org/licenses/MIT>
 *
 * This GraphQL EBNF file arranged by GraphQL Specifition June 2018.
 * http://spec.graphql.org/June2018/
 *
 * For grammar summary please see:
 * https://spec.graphql.org/June2018/#sec-Appendix-Grammar-Summary
 * 
 *
 * This EBNF file use W3C EBNF definition:
 * https://www.w3.org/TR/xml/#sec-notation
 * 
 * Why we should not use ISO-14977 ebnf:
 * https://dwheeler.com/essays/dont-use-iso-14977-ebnf.html
 *
 * For generate Railroad Diagram please see:
 * https://bottlecaps.de/rr/ui 
 *
 */


/* SourceCharacter Expression */
SourceCharacter ::=  #x0009 | #x000A | #x000D | [#x0020-#xFFFF] /* /[\u0009\u000A\u000D\u0020-\uFFFF]/ */



/* Ignored Tokens Expression */
Ignored        ::= UnicodeBOM | WhiteSpace | LineTerminator | Comment | Comma
UnicodeBOM     ::= #xFEFF  /* Byte Order Mark (U+FEFF) */
WhiteSpace     ::= #x0009 | #x0020 /* ASCII: \t | Space, Horizontal Tab (U+0009), Space (U+0020) */
LineTerminator ::= #x000A | #x000D | #x000D#x000A   /* ASCII: \n | \r\n | \r, New Line (U+000A) | Carriage Return (U+000D) [Lookahead != New Line (U+000A)] | Carriage Return (U+000D)New Line (U+000A) */
Comment        ::= "#" CommentChar* LineTerminator
CommentChar    ::= SourceCharacter - LineTerminator
Comma          ::= ","



/* Lexical Tokens Expression */
Token                ::= Punctuator | Name | IntValue | FloatValue | StringValue
Punctuator           ::= "!" | "$" | "(" | ")" | "..." | ":" | "=" | "@" | "[" | "]" | "{" | "|" | "}"
Name                 ::= [_A-Za-z][_0-9A-Za-z]*
IntValue             ::= IntegerPart 
IntegerPart          ::= NegativeSign? Ignored "0" Ignored | NegativeSign? Ignored NonZeroDigit Ignored Digit+? Ignored /* "[\+\-0-9]+" */
NegativeSign         ::= "-"
Digit                ::= [0-9]
NonZeroDigit         ::= Digit - "0"
FloatValue           ::= IntegerPart FractionalPart | IntegerPart ExponentPart | IntegerPart FractionalPart ExponentPart /* "[\+\-0-9]+\.[0-9]" */
FractionalPart       ::= "." Digit+
ExponentPart         ::= ExponentIndicator Sign? Digit+
ExponentIndicator    ::= "e" | "E"
Sign                 ::= "+" | "-"
StringValue          ::= '"""' '"""' | '"' '"' | '"' StringCharacter '"' | '"""' BlockStringCharacter '"""'
StringCharacter      ::= SourceCharacter - '"' | SourceCharacter - "\" | SourceCharacter - LineTerminator | "\u" EscapedUnicode | "\" EscapedCharacter /* SourceCharacter but not " or \ or LineTerminator | \uEscapedUnicode | \EscapedCharacter */
EscapedUnicode       ::= [#x0000-#xFFFF] 
EscapedCharacter     ::= '"' | '\' | '/' | 'b' | 'f' | 'n' | 'r' | 't'
BlockStringCharacter ::= SourceCharacter - '"""' | SourceCharacter - '\"""' | '\"""' 



/* Document Expression */
Document ::= Ignored Definition+ Ignored


/* Definition Expression */
Definition           ::= ExecutableDefinition | TypeSystemDefinition | TypeSystemExtension
ExecutableDefinition ::= OperationDefinition | FragmentDefinition


/* OperationDefinition Expression */
OperationDefinition ::= SelectionSet | Ignored OperationType Ignored Name? Ignored VariableDefinitions? Ignored Directives? SelectionSet 
OperationType       ::= "query" | "mutation" | "subscription" 


/* SelectionSet Expression */
SelectionSet ::= "{" Ignored Selection+ Ignored "}" Ignored
Selection    ::= Field Ignored | FragmentSpread Ignored | InlineFragment Ignored


/* Field Expression */
Field ::= Alias? Ignored Name Ignored Arguments? Ignored Directives? Ignored SelectionSet? Ignored


/* Alias Expression */
Alias ::= Name Ignored ":" Ignored


/* Arguments Expression */
Arguments ::= "(" Ignored Argument+ Ignored ")" Ignored
Argument  ::= Name Ignored ":" Ignored Value Ignored


/* FragmentSpread Expression */
FragmentSpread     ::= "..." Ignored FragmentName Ignored Directives? Ignored
InlineFragment     ::= "..." Ignored TypeCondition? Ignored Directives? Ignored SelectionSet? Ignored
FragmentDefinition ::= "fragment" Ignored FragmentName Ignored TypeCondition Ignored Directives? Ignored SelectionSet Ignored
FragmentName       ::= Name - "on"
TypeCondition      ::= "on" Ignored NamedType Ignored


/* Value Expression */ 
Value            ::= Variable | IntValue | FloatValue | StringValue | BooleanValue | NullValue | EnumValue | ListValue | ObjectValue
BooleanValue     ::= "true" | "false"
NullValue        ::= "null"
EnumValue        ::=  Name - "true" | Name - "false" | Name - "null" /* Name but not "true" or "false" or "null", "(?!(true|false|null))[_A-Za-z][_0-9A-Za-z]*" */
ListValue        ::= "[" "]" | "[" Value+ "]"
ObjectValue      ::= "{" "}" | "{" ObjectField+ "}"
ObjectField      ::= Ignored Name Ignored ":" Ignored Value Ignored


/* VariableDefinitions Expression */
VariableDefinitions ::= "(" VariableDefinition+ ")"
VariableDefinition  ::= Ignored Variable ":" Ignored Type Ignored DefaultValue? Ignored
Variable            ::= "$" Name
DefaultValue        ::= "=" Ignored Value


/* Type Expression */
Type        ::= NamedType | ListType | NonNullType
NamedType   ::= Name
ListType    ::= "[" Type+ "]"
NonNullType ::= NamedType "!" | ListType "!"


/* Directives Expression */
Directives ::= Directive+
Directive  ::= "@" Ignored Name Ignored Arguments? Ignored


/* TypeSystemDefinition Expression */
TypeSystemDefinition ::= SchemaDefinition | TypeDefinition | DirectiveDefinition
TypeSystemExtension  ::= SchemaExtension | TypeExtension


/* SchemaDefinition Expression */
SchemaDefinition ::= "schema" Ignored Directives? Ignored "{" Ignored OperationTypeDefinition+ Ignored "}" Ignored
SchemaExtension  ::= "extend" Ignored "schema" Directives? Ignored "{" Ignored OperationTypeDefinition+ Ignored "}" Ignored | "extend" Ignored "schema" Directives Ignored


/* OperationTypeDefinition Expression */
OperationTypeDefinition ::= OperationType Ignored ":" Ignored NamedType Ignored


/* Description Expression */
Description ::= StringValue


/* TypeDefinition Expression */
TypeDefinition            ::= ScalarTypeDefinition | ObjectTypeDefinition | InterfaceTypeDefinition | UnionTypeDefinition | EnumTypeDefinition | InputObjectTypeDefinition
TypeExtension             ::= ScalarTypeExtension | ObjectTypeExtension | InterfaceTypeExtension | UnionTypeExtension | EnumTypeExtension | InputObjectTypeExtension

ScalarTypeDefinition      ::= Description? Ignored "scalar" Ignored Name Ignored Directives? Ignored
ScalarTypeExtension       ::= "extend" Ignored "scalar" Ignored Name Ignored Directives Ignored

ObjectTypeDefinition      ::= Description? Ignored "type" Ignored Name Ignored ImplementsInterfaces? Ignored Directives? Ignored FieldsDefinition? gnored
ObjectTypeExtension       ::= "extend" Ignored "type" Ignored Name Ignored ImplementsInterfaces? Ignored Directives? Ignored FieldsDefinition Ignored | "extend" Ignored "type" Ignored Name Ignored ImplementsInterfaces? Ignored Directives Ignored | "extend" Ignored "type" Ignored Name Ignored ImplementsInterfaces Ignored

ImplementsInterfaces      ::= "implements" Ignored "&"? Ignored NamedType Ignored

InterfaceTypeDefinition   ::= Description? Ignored "interface" Ignored Name Ignored Directives? Ignored FieldsDefinition? Ignored
InterfaceTypeExtension    ::= "extend" Ignored "interface" Ignored Name Ignored Directives? Ignored FieldsDefinition Ignored | "extend" Ignored "interface" Ignored Name Ignored Directives Ignored 

UnionTypeDefinition       ::= Description? Ignored "union" Ignored Name Ignored Directives? Ignored UnionMemberTypes?      Ignored
UnionMemberTypes          ::= "=" Ignored "|"? Ignored NamedType Ignored | UnionMemberTypes Ignored "|" Ignored NamedType Ignored
UnionTypeExtension        ::= "extend" Ignored "union" Ignored Name Ignored Directives? Ignored EnumValuesDefinition? Ignored | "extend" Ignored "union" Ignored Name Ignored Directives Ignored

EnumTypeDefinition        ::= Description? Ignored "enum" Ignored Name Ignored Directives? Ignored EnumValuesDefinition?   Ignored
EnumValuesDefinition      ::= "{" Ignored EnumValueDefinition+ Ignored "}" Ignored
EnumValueDefinition       ::= Description? Ignored EnumValue Ignored Directives Ignored
EnumTypeExtension         ::= "extend" Ignored "enum" Ignored Name Ignored Directives? Ignored EnumValuesDefinition Ignored | "extend" Ignored "enum" Ignored Name Ignored Directives Ignored

InputObjectTypeDefinition ::= Description? Ignored "input" Ignored Name Ignored Directives? Ignored InputFieldsDefinition? Ignored
InputFieldsDefinition     ::= "{" Ignored InputValueDefinition+ Ignored "}" Ignored
InputObjectTypeDefinition ::= Description? Ignored "input" Ignored Name Ignored Directives? Ignored InputFieldsDefinition? Ignored
InputFieldsDefinition     ::= "{" Ignored InputValueDefinition+ Ignored "}" Ignored
InputObjectTypeExtension  ::= "extend" Ignored "input" Ignored Name Ignored Directives? Ignored InputFieldsDefinition Ignored | "extend" Ignored "input" Ignored Name Ignored Directives Ignored 


/* DirectiveDefinition Expression */
DirectiveDefinition         ::= Description? Ignored "directive" Ignored "@" Ignored Name Ignored ArgumentsDefinition? Ignored "on" Ignored DirectiveLocations Ignored
DirectiveLocations          ::= "|"? Ignored DirectiveLocation Ignored | DirectiveLocations Ignored "|" Ignored DirectiveLocation Ignored
DirectiveLocation           ::= ExecutableDirectiveLocation | TypeSystemDirectiveLocation
ExecutableDirectiveLocation ::= "QUERY" | "MUTATION" | "SUBSCRIPTION" | "FIELD" | "FRAGMENT_DEFINITION" | "FRAGMENT_SPREAD" | "INLINE_FRAGMENT" 
TypeSystemDirectiveLocation ::= "SCHEMA" | "SCALAR" | "OBJECT" | "FIELD_DEFINITION" | "ARGUMENT_DEFINITION" | "INTERFACE" | "UNION" | "ENUM" | "ENUM_VALUE" | "INPUT_OBJECT" | "INPUT_FIELD_DEFINITION" 


/* FieldsDefinition Expression */
FieldsDefinition ::= "{" Ignored FieldDefinition+ Ignored "}"
FieldDefinition  ::= Description? Ignored Name Ignored ArgumentsDefinition? Ignored ":" Ignored Type Ignored Directives? Ignored


/* ArgumentsDefinition Expression */
ArgumentsDefinition  ::= "(" Ignored InputValueDefinition+ Ignored ")" Ignored
InputValueDefinition ::= Description? Ignored Name Ignored ":" Ignored Type Ignored DefaultValue? Ignored Directives? Ignored
